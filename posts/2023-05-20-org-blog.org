#+title: Building a Custom Static Site Generator: A Homesteading Journey with Clojure and Org-Mode
#+subtitle: How to craft a unique digital presence tailored to your needs
#+date:<2023-04-22 Sat>
#+options: H:6

* Homesteading in the Digital World with Clojure and Org-Mode

:LOGBOOK:
CLOCK: [2023-05-25 Thu 12:25]--[2023-05-25 Thu 13:10] =>  0:45
CLOCK: [2023-05-25 Thu 11:25]--[2023-05-25 Thu 12:17] =>  0:52
CLOCK: [2023-05-24 Wed 21:45]--[2023-05-24 Wed 22:10] =>  0:25
CLOCK: [2023-05-21 Sun 13:55]--[2023-05-21 Sun 14:59] =>  1:04
CLOCK: [2023-05-21 Sun 13:21]--[2023-05-21 Sun 13:54] =>  0:33
CLOCK: [2023-05-20 Sat 10:45]--[2023-05-20 Sat 11:51] =>  1:06
:END:

** Building a Homestead: Why?

:PROPERTIES:
:CUSTOM_ID: intro
:END:
[[https://jackrusher.com/journal/homesteading.html][Jack Rusher]] articulates the concept of digital homesteading – a call for the crafting of your own online presence, rather than relying solely on social media platforms. This is advice that resonates with me. I firmly believe in maintaining control over my content and choosing to distribute it across social media platforms (or syndicate it) rather than being solely reliant on them.

Indeed, there are numerous ready-made static site generators available, and the smart (and time-valuing) choice would be to use one of them. However, I have some specific needs that, while niche, aren't quite met by any existing generator. This brings me to my digital homesteading project: building a custom static site generator from scratch.

** My Custom Static Site Generator: What is it?

This blog post documents the journey of creating a personal website and blog platform. The purpose of this platform is to enable me to write posts and content in Org Mode and generate a static site using Clojure. It's not intended to be a generalized platform, but rather a collection of functions that allow me to publish a static site. You can find the Github repository [[https://Github.com/jgoodhcg/org-blog][here]], and I host it using [[https://www.digitalocean.com/community/tutorials/how-to-deploy-a-static-website-to-the-cloud-with-digitalocean-app-platform][Digital Ocean's app platform]].

** My Specific Requirements

:PROPERTIES:
:CUSTOM_ID: specifics
:END:
My requirements for this project were as follows:

*** Compatibility with Org-Mode
Since I primarily use Doom Emacs as my text editor, writing in org mode is my preferred medium for content creation.

*** Ease of Styling
I sought to leverage Clojure hiccup and Tailwind for creating HTML without learning a new template language or an arbitrary theme plugin system.

*** Efficient Load Times
A static site with minimal dependencies was essential for efficient loading times.

*** Flexibility
I wanted the freedom to add features such as comments or interactive experiences on my site without having to defy platform conventions.

*** Minimal Overhead
I aimed to be as close to basic HTML, CSS, and JavaScript as possible, while still utilizing Clojure, hiccup, tailwind, and org mode. I also wanted an easy process for deploying and writing, as a low barrier to content production encourages more frequent writing.

*** Cost Effectiveness
A cheap or free hosting solution that wouldn't require scaling considerations was a must.

** My Journey through Existing Blogging Solutions

:PROPERTIES:
:CUSTOM_ID: journey
:END:

Several platforms I tested were interesting but ultimately fell short of meeting my needs.

*** Cryogen
Cryogen, a static site generator written in Clojure, served its purpose well, but I encountered some challenges. Writing in markdown was less comfortable for me than in Org-Mode, and deployment was somewhat tedious.

*** Ghost
Ghost's themes were impressive and offered certain conveniences such as metadata for Twitter previews and Google result displays. However, the experience with the editor left something to be desired, and I was hesitant to learn another theme syntax to customize styles.

*** Other Considerations
   :PROPERTIES:
   :CUSTOM_ID: considerations
   :END:

A few other platforms caught my attention as well:

- *Roam Research* as the blog site: While the idea of using Roam Research was interesting, the fact that it would create a Single Page Application (SPA) and not a static site raised concerns about load times. Additionally, setting up a custom domain appeared to be either difficult or potentially costly.

- *org-static-blog*: As the name implies, org-static-blog does exactly what it promises – it's a simple static blog generator for Emacs' Org-Mode. However, styling it proved to be an arduous task, as all the template HTML is embedded within a string in an Emacs configuration file.

** Project Overview
  :PROPERTIES:
  :CUSTOM_ID: setup
  :END:
I decided to start from scratch. From an empty git repo I added a directory with some org mode blog posts and a jvm clojure file. I went from there building with the REPL. What I ended up with looked like this:

  #+begin_example
├── css
├── pages
├── posts
├── src
│   └── org_blog
│       ├── common
│       └── pages
└── static
    ├── archive
    ├── css
    │   └── svg
    ├── img
    ├── posts
    │   ├── 2023-04-22-kitchen-sink
    │   └── 2023-05-20-org-blog
    └── resume
  #+end_example

*** css
  Contains one ~input.css~ file with some tailwind `@apply` statements for things that I can't style directly in the template src files.

*** pages
Contains one off org files for pages that are not blog posts. As of now, that is just my resume.

*** posts
All of the org files representing my blog posts.

*** src
This is where all of the clojure code exists to build the site. It's starts with ~core.clj~. I've organically organized it loosely into different namespaces. Right now the only directories needed are ~common/~ and ~pages/~.

*** static
This is the directory with the static assets. All of the html, css, and images are here. I commit images right to the repository. Videos I will host in an s3 bucket and link out. When the Github repo updates the digital ocean app pulls in the changes and serves everything in this directory.

** Workflow
  :PROPERTIES:
  :CUSTOM_ID: workflow
  :END:

  I'm really happy with my workflow. It starts with opening Doom Emacs.

*** TODO  Insert images

*** Easy writing
  If I want to just write I open or create an org file in the ~posts/~ directory and start writing. If I want to save my progress I can commit and push my changes to the Github repo.

*** Preview with the REPL
  If I want to see what a post looks like I can start a repl and eval the ~org-blog.core~ namespace. That starts up a development webserver locally and generates all the static files. It includes a filewatcher so any changes to source code or the org mode blog posts trigger a re-generation of the static files. I can then go to ~localhost:8080~ and see the post I'm working on.

*** Custom pages
  Not everything I want to make is an Org-Mode based blog post. For one off pages I make a clojure namespace that uses hiccup to generate an html page. All of the reusable components of the site are clojure functions that generate hiccup. Building up a page is functional and almost /React/ like.

*** Deployment
  When I'm ready to deploy I just need to commit the changes in ~static/~.

** Code
  :PROPERTIES:
  :CUSTOM_ID: code
  :END:
There are some areas of the codebase that I think are rather interesting.

*** Dev webserver
To be able to develop locally the project needed a dev webserver. That exists in ~org-blog.dev-server~ namespace. It uses ~org.httpkit.server~. The heart of it is just a simple handler function that does a little something different per content type.

#+begin_src clojure
(defn handler [req]
  (let [resource-path (str "static" (:uri req))
        file (io/file resource-path)
        ext  (->> (split resource-path #"\.")
                  last)]
    (if (.exists file)
      (if (.isDirectory file)
        {:status  200
         :headers {"Content-Type" "text/html"}
         :body    (slurp (io/file (str resource-path "/index.html")))}
        {:status  200
         :headers {"Content-Type" (content-type-for resource-path)}
         :body    (if (#{"jpg" "png" "gif"} ext)
                    (io/input-stream file)
                    (slurp file))})
      {:status  404
       :headers {"Content-Type" "text/plain"}
       :body    "Not Found"})))
#+end_src

*** File watcher
What makes developing the site super easy is that it automatically re-generates static files, and reloads the repl, on any file save. In ~org-blog.core~ namespace are a few lines of code that make this possible. This is all built on top of the [[https://github.com/wkf/hawk][hawk library]].

#+begin_src clojure
;; These lines are in `org-blog.dev-server`
(defn watch-source-files [dirs handler]
  (hawk/watch! [{:paths   dirs
                 :handler handler}]))

(defonce source-watchers (atom nil))

;; These lines are in `org-blog.core`
(when (nil? @dev-server/source-watchers)
  (reset! dev-server/source-watchers
          (dev-server/watch-source-files
           ["src" "posts" "pages"]
           (fn [ctx e]
             (when (= (:kind e) :modify)
               (println "File modified:" (:file e))
               ;; Calling `ns-repl/refresh` in another thread (hawk must run this handler in a another thread)
               ;; generates an error
               ;; By wrapping in future, by some magic, the function calls within are scheduled on the main thread I guess
               (future
                 (try
                   (println "Refreshing repl ...")
                   (ns-repl/refresh)
                   (println "Ahhhh, so refreshed!")
                   (regenerate-site)
                   (catch Exception e
                     (when-not (and (instance? IllegalStateException e)
                                    ;; Not sure why this error happens but the repl refreshes when it's thrown so I guess it doesn't matter
                                    (.contains (.getMessage e) "Can't change/establish root binding of: *ns* with set"))
                       (println "Error refreshing repl:" e))))))))))
#+end_src

*** Converting Org-Mode Files with Pandoc

In ~org-blog.common.org~ is the actual conversion of Org-Mode content to html. It relies on [[https://pandoc.org/][pandoc]] and basically shells out to that system dependency. I use some basic templates to isolate the body and the table of contents (toc) and return a vector of the html toc and the html body.

#+begin_src clojure
(defn org->html
  "Requires at least pandoc 3.1.2 installed locally"
  [org-file]

  (let [absolute-org-file  (full-path org-file)
        toc-template-path  (full-path "./src/org_blog/pandoc-template-toc.html")
        body-template-path (full-path "./src/org_blog/pandoc-template-body.html")
        toc-cmd            (str "pandoc -f org -t html "
                                    "--template=" toc-template-path " "
                                    "--table-of-contents " absolute-org-file)
        body-cmd           (str "pandoc -f org -t html "
                                "--template=" body-template-path " "
                                absolute-org-file)
        toc-result         (shell/sh "sh" "-c" toc-cmd)
        body-result        (shell/sh "sh" "-c" body-cmd)]
    (if (and (zero? (:exit toc-result))
             (zero? (:exit body-result)))
      [(:out toc-result)
       (:out body-result)]
      (do (println (str "Error(s):" [(:error toc-result) (:error body-result)]))
          nil))))
#+end_src

** Design Choices
  :PROPERTIES:
  :CUSTOM_ID: design
  :END:
  - Brief about the design inspiration (vaporwave color scheme, LCARS borders)
  - Making it responsive: How to ensure the site works well on all device sizes

** Working with Org-Mode
  :PROPERTIES:
  :CUSTOM_ID: orgmode
  :END:
  - Discuss Org-Mode's benefits for project organization and note-taking
  - Describe how to utilize Org-Mode for blog writing (e.g., headings, links, etc.)
  - Share the workaround for Pandoc's heading interpretation to h6 in Org-Mode

** Handling Images
  :PROPERTIES:
  :CUSTOM_ID: images
  :END:
  - Importance of image management: enhancing blog posts, privacy concerns
  - How to use exiftool to strip GPS data from images
  - Discuss the pros and cons of storing images on Github

** Lessons Learned and Tips for Other Developers
  :PROPERTIES:
  :CUSTOM_ID: lessons
  :END:
  - Share your experiences and any challenges you faced during the project
  - Tips and advice for Clojure developers looking to create their own personal blog sites

** Conclusion
  :PROPERTIES:
  :CUSTOM_ID: conclusion
  :END:
  - Summarize the main points of the blog post
  - Encourage readers to start their own projects and invite them to share their experiences

